import os, requests, zipfile, json, sqlite3, telnetlib, time, hashlib, http, random, urllib, openai, datetime, shutil


def DatabaseCreateInit(currentYear):
    DBconn = sqlite3.connect('CVE' + str(currentYear) + '_OfficialMonitor.UN')
    DBcursor = DBconn.cursor()
    DatabaseInitSQL = ["create table IF NOT EXISTS TodayCVEs(CVEID TEXT primary key not null,  \
                                                             Title TEXT,  \
                                                             Descriptions TEXT,  \
                                                             Metrics TEXT,  \
                                                             CVEReferences TEXT,  \
                                                             ProblemTypes TEXT,  \
                                                             Affected TEXT, \
                                                             UpdateTime TEXT,  \
                                                             RecordValidity INT not null \
                                                             );",
                       "create table IF NOT EXISTS OldCVEs(CVEID TEXT primary key not null,  \
                                                           Title TEXT,  \
                                                           Descriptions TEXT,  \
                                                           Metrics TEXT,  \
                                                           CVEReferences TEXT,  \
                                                           ProblemTypes TEXT,  \
                                                           Affected TEXT, \
                                                           UpdateTime TEXT,  \
                                                           RecordValidity INT not null \
                                                           );",
                       "create table IF NOT EXISTS CNVD(CVEID TEXT primary key not null,  \
                                                         SubmissionContent TEXT,  \
                                                         SubmissionContent2 TEXT,  \
                                                         SubmissionContent3 TEXT,  \
                                                         SubmissionContent4 TEXT,  \
                                                         SubmissionContent5 TEXT,  \
                                                         SubmissionContent6 TEXT,  \
                                                         UpdateTime TEXT,  \
                                                         RecordValidity INT not null \
                                                         );",
                       "create table IF NOT EXISTS CNNVD(CVEID TEXT primary key not null,  \
                                                        SubmissionContent TEXT,  \
                                                        SubmissionContent2 TEXT,  \
                                                        SubmissionContent3 TEXT,  \
                                                        SubmissionContent4 TEXT,  \
                                                        SubmissionContent5 TEXT,  \
                                                        SubmissionContent6 TEXT,  \
                                                        UpdateTime TEXT,  \
                                                        RecordValidity INT not null \
                                                        );",
                       "create table IF NOT EXISTS CITIVD(CVEID TEXT primary key not null,  \
                                                          SubmissionContent TEXT,  \
                                                          SubmissionContent2 TEXT,  \
                                                          SubmissionContent3 TEXT,  \
                                                          SubmissionContent4 TEXT,  \
                                                          SubmissionContent5 TEXT,  \
                                                          SubmissionContent6 TEXT,  \
                                                          UpdateTime TEXT,  \
                                                          RecordValidity INT not null \
                                                          );",
                       "create table IF NOT EXISTS CICSVD(CVEID TEXT primary key not null,  \
                                                          SubmissionContent TEXT,  \
                                                          SubmissionContent2 TEXT,  \
                                                          SubmissionContent3 TEXT,  \
                                                          SubmissionContent4 TEXT,  \
                                                          SubmissionContent5 TEXT,  \
                                                          SubmissionContent6 TEXT,  \
                                                          UpdateTime TEXT,  \
                                                          RecordValidity INT not null \
                                                          );"
                       ]
    try:
        for currentExecSQL in DatabaseInitSQL:
            DBcursor.execute(currentExecSQL)
        DBconn.commit()
        print("[*]Database was ready!")
    except Exception as e:
        print("[-]Database Init Error: " + str(e))
    DBcursor.close()
    DBconn.close()


def SendmailWithTelnet(MXServer, MailFrom, MailTo, Subject, Text):
    TelnetConnect = telnetlib.Telnet()
    TelnetConnect.open(MXServer, 25)
    TelnetConnect.write(b"EHLO UnknownSecurity\r\n")
    time.sleep(0.1)
    Mail_From = "MAIL FROM:<" + str(MailFrom) + ">"
    TelnetConnect.write(Mail_From.encode() + b'\r\n')
    time.sleep(0.1)
    Mail_To = "RCPT TO:<" + str(MailTo) + ">"
    TelnetConnect.write(Mail_To.encode() + b'\r\n')
    time.sleep(0.1)
    TelnetConnect.write(b'DATA\r\n')
    time.sleep(0.1)
    Mail_Data = "TO:<" + str(MailTo) + ">\r\nFROM:<" + str(MailFrom) + ">\r\nSUBJECT:" + str(
        Subject) + "\r\n\r\n" + str(Text) + "\r\n.\r\n"
    TelnetConnect.write(Mail_Data.encode())
    time.sleep(0.1)
    TelnetConnect.write(b'QUIT\r\n')
    time.sleep(0.1)
    TelnetConnect.close()


def BaiduTranslate(currentCVE, Sentence):
    # appid = '20010520000771314'
    # secretKey = 'ONSKfCvmE50pZ5ugzppJf'
    appid = BaiduTranslate_appid
    secretKey = BaiduTranslate_secretKey

    httpClient = None
    myurl = '/api/trans/vip/fieldtranslate'

    fromLang = 'auto'
    toLang = 'zh'
    salt = random.randint(32768, 65536)
    q = Sentence
    domain = 'it'
    sign = appid + q + str(salt) + domain + secretKey
    sign = hashlib.md5(sign.encode()).hexdigest()
    myurl = myurl + '?appid=' + appid + '&q=' + urllib.parse.quote(
        q) + '&from=' + fromLang + '&to=' + toLang + '&salt=' + str(salt) + '&domain=' + domain + '&sign=' + sign
    try:
        httpClient = http.client.HTTPConnection('api.fanyi.baidu.com')
        httpClient.request('GET', myurl)

        response = httpClient.getresponse()
        result_all = response.read().decode("utf-8")
        result = json.loads(result_all)
        SentenceCN = result['trans_result'][0]['dst']
    except Exception as e:
        print("Translate Error(" + str(currentCVE) + "):" + str(e))
        SentenceCN = ""
    finally:
        if httpClient:
            httpClient.close()
    return SentenceCN


def CallToMagicalChatGPT(CVEDetails, VulnerabilityLibrary="CNVD", useGithubProxy=1):
    if useGithubProxy == 1:
        openai.api_base = "https://api.freepop.top/v1"
    elif useGithubProxy == 2:
        openai.api_base = "https://openai.api.unkn0wn.cn/v1"
    else:
        pass
    # openai.api_key = "oa-VNPKfCCRazytHurSDaYVmE50NOJBFRUvHq8uygS"
    openai.api_key = Openai_Api_Key
    if VulnerabilityLibrary == "CNNVD":
        messages = [
            {"role": "system",
             "content": "你现在是一个从事网络空间安全行业的漏洞通报工程师，你的工作是将CVE上最新发布的漏洞总结为中文，并按照特定格式进行整理。如输入一个CVE漏洞信息，输出一个CNNVD漏洞信息。"},
            {"role": "system",
             "content": '''CVE上的漏洞信息数据格式为元组中包含JSON类型的数据，这是其中一条数据示例：('CVE-2023-3782', 'DoS of the OkHttp client when using a BrotliInterceptor and surfing to a malicious web server, or when an attacker can perform MitM to inject a Brotli zip-bomb into an HTTP response', 'DoS of the OkHttp client when using a BrotliInterceptor and surfing to a malicious web server, or when an attacker can perform MitM to inject a Brotli zip-bomb into an HTTP response\n\n', '5.9 MEDIUM', '[{"url": "https://github.com/square/okhttp/issues/7738"},{"url": "https://research.jfrog.com/vulnerabilities/okhttp-client-brotli-dos/"}]", 'CWE-400 Uncontrolled Resource Consumption', "[{"collectionURL": "https://mvnrepository.com","packageName": "com.squareup.okhttp3:okhttp-brotli","versions": [{"lessThan": "*","status": "affected","version": "0","versionType": "maven"}]}]", '2023-07-19_2100Z', 1)'''},
            {"role": "system",
             "content": '''对于CNNVD漏洞库的漏洞通报数据格式为一个文档模板，这是对应CVE数据示例一条CNNVD数据示例：\n\r'''},
            {"role": "system", "content": "接下来有一些对应的输入输出的数据示例，请你根据这些示例总结的更准确一些。"},
            # {"role": "system", "content": '''示例一输入：。
            #                                  示例一输出：。'''},
        ]
    elif VulnerabilityLibrary == "CNVD":
        messages = [
            {"role": "system",
             "content": "你现在是一个从事网络空间安全行业的漏洞通报工程师，你的工作是将CVE上最新发布的漏洞总结为中文，并按照特定格式进行整理。如输入一个CVE漏洞信息，输出一个CNVD漏洞信息。"},
            {"role": "system",
             "content": '''CVE上的漏洞信息数据格式为元组中包含JSON类型的数据，这是其中一条数据示例：('CVE-2023-3782', 'DoS of the OkHttp client when using a BrotliInterceptor and surfing to a malicious web server, or when an attacker can perform MitM to inject a Brotli zip-bomb into an HTTP response', 'DoS of the OkHttp client when using a BrotliInterceptor and surfing to a malicious web server, or when an attacker can perform MitM to inject a Brotli zip-bomb into an HTTP response\n\n', '5.9 MEDIUM', '[{"url": "https://github.com/square/okhttp/issues/7738"},{"url": "https://research.jfrog.com/vulnerabilities/okhttp-client-brotli-dos/"}]", 'CWE-400 Uncontrolled Resource Consumption', "[{"collectionURL": "https://mvnrepository.com","packageName": "com.squareup.okhttp3:okhttp-brotli","versions": [{"lessThan": "*","status": "affected","version": "0","versionType": "maven"}]}]", '2023-07-19_2100Z', 1)'''},
            {"role": "system",
             "content": '''对于CNVD漏洞库的漏洞通报数据格式为一个文档模板，这是对应CVE数据示例一条CNVD数据示例：\n\r'''},
            {"role": "system", "content": "接下来有一些对应的输入输出的数据示例，请你根据这些示例总结的更准确一些。"},
            # {"role": "system", "content": '''示例一输入：。
            #                                  示例一输出：。'''},
        ]
    elif VulnerabilityLibrary == "CICSVD":
        messages = [
            {"role": "system",
             "content": "你现在是一个从事网络空间安全行业的漏洞通报工程师，你的工作是将CVE上最新发布的漏洞总结为中文，并按照特定格式进行整理。如输入一个CVE漏洞信息，输出一个CICSVD漏洞信息。"},
            {"role": "system",
             "content": '''CVE上的漏洞信息数据格式为元组中包含JSON类型的数据，这是其中一条数据示例：('CVE-2023-3782', 'DoS of the OkHttp client when using a BrotliInterceptor and surfing to a malicious web server, or when an attacker can perform MitM to inject a Brotli zip-bomb into an HTTP response', 'DoS of the OkHttp client when using a BrotliInterceptor and surfing to a malicious web server, or when an attacker can perform MitM to inject a Brotli zip-bomb into an HTTP response\n\n', '5.9 MEDIUM', '[{"url": "https://github.com/square/okhttp/issues/7738"},{"url": "https://research.jfrog.com/vulnerabilities/okhttp-client-brotli-dos/"}]", 'CWE-400 Uncontrolled Resource Consumption', "[{"collectionURL": "https://mvnrepository.com","packageName": "com.squareup.okhttp3:okhttp-brotli","versions": [{"lessThan": "*","status": "affected","version": "0","versionType": "maven"}]}]", '2023-07-19_2100Z', 1)'''},
            {"role": "system",
             "content": '''对于CICSVD漏洞库的漏洞通报数据格式为一个文档模板，这是对应CVE数据示例一条CICSVD数据示例：\n\r'''},
            {"role": "system", "content": "接下来有一些对应的输入输出的数据示例，请你根据这些示例总结的更准确一些。"},
            # {"role": "system", "content": '''示例一输入：。
            #                                  示例一输出：。'''},
        ]
    elif VulnerabilityLibrary == "CITIVD":
        messages = [
            {"role": "system",
             "content": "你现在是一个从事网络空间安全行业的漏洞通报工程师，你的工作是将CVE上最新发布的漏洞总结为中文，并按照特定格式进行整理。如输入一个CVE漏洞信息，输出一个CITIVD漏洞信息。"},
            {"role": "system",
             "content": '''CVE上的漏洞信息数据格式为元组中包含JSON类型的数据，这是其中一条数据示例：('CVE-2023-3782', 'DoS of the OkHttp client when using a BrotliInterceptor and surfing to a malicious web server, or when an attacker can perform MitM to inject a Brotli zip-bomb into an HTTP response', 'DoS of the OkHttp client when using a BrotliInterceptor and surfing to a malicious web server, or when an attacker can perform MitM to inject a Brotli zip-bomb into an HTTP response\n\n', '5.9 MEDIUM', '[{"url": "https://github.com/square/okhttp/issues/7738"},{"url": "https://research.jfrog.com/vulnerabilities/okhttp-client-brotli-dos/"}]", 'CWE-400 Uncontrolled Resource Consumption', "[{"collectionURL": "https://mvnrepository.com","packageName": "com.squareup.okhttp3:okhttp-brotli","versions": [{"lessThan": "*","status": "affected","version": "0","versionType": "maven"}]}]", '2023-07-19_2100Z', 1)'''},
            {"role": "system",
             "content": '''对于CITIVD漏洞库的漏洞通报数据格式为一个文档模板，这是对应CVE数据示例一条CITIVD数据示例：\n\r'''},
            {"role": "system", "content": "接下来有一些对应的输入输出的数据示例，请你根据这些示例总结的更准确一些。"},
            # {"role": "system", "content": '''示例一输入：。
            #                                  示例一输出：。'''},
        ]
    else:
        messages = [
            {"role": "system",
             "content": "你现在是一个从事网络空间安全行业的漏洞通报工程师，你的工作是将CVE上最新发布的漏洞总结为中文，并按照特定格式进行整理。如输入一个CVE漏洞信息，输出一个UNKNOWNSECURITY-VD漏洞信息。"},
            {"role": "system",
             "content": '''CVE上的漏洞信息数据格式为元组中包含JSON类型的数据，这是其中一条数据示例：('CVE-2023-3782', 'DoS of the OkHttp client when using a BrotliInterceptor and surfing to a malicious web server, or when an attacker can perform MitM to inject a Brotli zip-bomb into an HTTP response', 'DoS of the OkHttp client when using a BrotliInterceptor and surfing to a malicious web server, or when an attacker can perform MitM to inject a Brotli zip-bomb into an HTTP response\n\n', '5.9 MEDIUM', '[{"url": "https://github.com/square/okhttp/issues/7738"},{"url": "https://research.jfrog.com/vulnerabilities/okhttp-client-brotli-dos/"}]", 'CWE-400 Uncontrolled Resource Consumption', "[{"collectionURL": "https://mvnrepository.com","packageName": "com.squareup.okhttp3:okhttp-brotli","versions": [{"lessThan": "*","status": "affected","version": "0","versionType": "maven"}]}]", '2023-07-19_2100Z', 1)'''},
            {"role": "system",
             "content": '''对于UNKNOWNSECURITY-VD漏洞库的漏洞通报数据格式为一个文档模板，这是对应CVE数据示例一条UNKNOWNSECURITY-VD数据示例：\n\r'''},
            {"role": "system", "content": "接下来有一些对应的输入输出的数据示例，请你根据这些示例总结的更准确一些。"},
            # {"role": "system", "content": '''示例一输入：。
            #                                  示例一输出：。'''},
        ]
    messages.append({"role": "user", "content": CVEDetails})
    chat_completion = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=messages)
    chatGPTreply = chat_completion.choices[0].message.content
    return chatGPTreply


def githubProxyMode(URL, useGithubProxy):
    if str(useGithubProxy) == "1":
        GithubProxy = "https://ghproxy.com/"
        URL = GithubProxy + URL
    elif str(useGithubProxy) == "2":
        GithubProxy = "https://github.proxy.unkn0wn.cn/"
        URL = str(URL).replace("https://github.com/", GithubProxy)
    else:
        GithubProxy = ""
    return URL


def DownloadAndExtractFileToJsonLoad(URL, useGithubProxy):
    URL = githubProxyMode(URL, useGithubProxy)
    WorkDirTempPath = "CVE-Official_Monitor_TMP"
    DownloadName = str(os.path.basename(URL))
    DownloadFilePath = WorkDirTempPath + "/" + DownloadName
    UnzipPath = WorkDirTempPath + "/" + os.path.splitext(DownloadName)[0]
    try:
        if not os.path.exists(WorkDirTempPath):
            os.mkdir(WorkDirTempPath)
    except Exception as e:
        print("[-]Temp Floader not Ready!!! : " + str(e))
    try:
        URL_Request = requests.get(URL, stream=True)
        WriteFile = open(DownloadFilePath, "wb")
        for chunk in URL_Request.iter_content(chunk_size=1024):
            if chunk:
                WriteFile.write(chunk)
                WriteFile.flush()
        WriteFile.close()
    except Exception as e:
        try:
            WriteFile.close()
        except:
            pass
        print("[-]Download Error(" + str(DownloadName) + "): " + str(e))
    try:
        with zipfile.ZipFile(DownloadFilePath, 'r') as UnzipFile:
            UnzipFile.extractall(UnzipPath)
        ExtractedFileList = os.listdir(UnzipPath + "/deltaCves")
        ExtractedFilePath = []
        for currentFile in ExtractedFileList:
            ExtractedFilePath.append(UnzipPath + "/deltaCves/" + str(currentFile))
    except Exception as e:
        ExtractedFilePath = "UnknownSecurity/Error_Break_W8ACRUX6"
        print("[-]Unzip Error(" + str(DownloadName) + "): " + str(e))
    LoadAllJsonToArray = []
    try:
        for currentFile in ExtractedFilePath:
            with open(currentFile, encoding="utf-8") as f:
                data = json.load(f)
                LoadAllJsonToArray.append(data)
    except Exception as e:
        print("[-]Load (" + ExtractedFilePath + ") Something went Wrong! : " + str(e))
    try:
        os.remove(DownloadFilePath)
    except Exception as e:
        print("[-]Remove Unzipped File(" + DownloadFilePath + ") Error : " + str(e))
    return LoadAllJsonToArray


def ClearTmpFloader():
    WorkDirTempPath = "CVE-Official_Monitor_TMP"
    AllTempFloader = os.listdir(WorkDirTempPath)
    if not AllTempFloader == []:
        for currentTempFloader in AllTempFloader:
            try:
                shutil.rmtree(WorkDirTempPath + "/" + currentTempFloader)
            except Exception as e:
                print("[-]Temp dir (" + WorkDirTempPath + "/" + currentTempFloader + ") Clear Fail! : " + str(e))


def OrganizeJSONintoStandardDictionary(currentLoadedCVEJson):
    StandardDictionary = {"cveMetadata": {"cveId": ""},
                          "containers": {"cna": {"title": "",
                                                 "references": "",
                                                 "affected": "",
                                                 "descriptions": [{"value": ""}],
                                                 "problemTypes": [{"descriptions": [{"description": ""}]}],
                                                 "metrics": [{"cvssV3_1": {"baseScore": "",
                                                                           "baseSeverity": ""}
                                                              }]
                                                 }
                                         }
                          }
    try:
        StandardDictionary["cveMetadata"]["cveId"] = currentLoadedCVEJson["cveMetadata"]["cveId"]
        try:
            StandardDictionary["containers"]["cna"]["title"] = currentLoadedCVEJson["containers"]["cna"]["title"]
        except Exception as e:
            print("[-] (" + StandardDictionary["cveMetadata"]["cveId"] + ") No Title in json.")
        try:
            StandardDictionary["containers"]["cna"]["descriptions"][0]["value"] = \
                currentLoadedCVEJson["containers"]["cna"]["descriptions"][0]["value"]
        except Exception as e:
            print("[-] (" + StandardDictionary["cveMetadata"]["cveId"] + ") No Descriptions in json.")
        try:
            StandardDictionary["containers"]["cna"]["metrics"][0]["cvssV3_1"]["baseScore"] = \
                currentLoadedCVEJson["containers"]["cna"]["metrics"][0]["cvssV3_1"]["baseScore"]
        except Exception as e:
            print("[-] (" + StandardDictionary["cveMetadata"]["cveId"] + ") No cvssV3_1 baseScore in json.")
        try:
            StandardDictionary["containers"]["cna"]["metrics"][0]["cvssV3_1"]["baseSeverity"] = \
                currentLoadedCVEJson["containers"]["cna"]["metrics"][0]["cvssV3_1"]["baseSeverity"]
        except Exception as e:
            print("[-] (" + StandardDictionary["cveMetadata"]["cveId"] + ") No cvssV3_1 baseSeverity in json.")
        try:
            StandardDictionary["containers"]["cna"]["references"] = currentLoadedCVEJson["containers"]["cna"][
                "references"]
        except Exception as e:
            print("[-] (" + StandardDictionary["cveMetadata"]["cveId"] + ") No References in json.")
        try:
            StandardDictionary["containers"]["cna"]["problemTypes"][0]["descriptions"][0]["description"] = \
                currentLoadedCVEJson["containers"]["cna"]["problemTypes"][0]["descriptions"][0]["description"]
        except Exception as e:
            print("[-] (" + StandardDictionary["cveMetadata"]["cveId"] + ") No problemTypes descriptions in json.")
        try:
            StandardDictionary["containers"]["cna"]["affected"] = currentLoadedCVEJson["containers"]["cna"]["affected"]
        except Exception as e:
            print("[-] (" + StandardDictionary["cveMetadata"]["cveId"] + ") No affected in json.")
    except Exception as e:
        print("[-]Error!!! This one no CVEID in json!!! Skip.")
    return StandardDictionary


def GetGithubRelease(GithubProjectURL, GithubProjectReleaseName="latest", useGithubProxy=0):
    LastTimeCVE_delta = ""
    GithubProjectURLSplit = GithubProjectURL.rsplit("/", 100)
    GithubProjectUsername = GithubProjectURLSplit[3]
    GithubProjectProjectname = GithubProjectURLSplit[4]
    LatestReleaseInformation = requests.get(githubProxyMode(
        "https://api.github.com/repos/" + str(GithubProjectUsername) + "/" + str(
            GithubProjectProjectname) + "/releases/" + str(GithubProjectReleaseName), useGithubProxy))
    try:
        for currentReleaseNode in LatestReleaseInformation.json()["assets"]:
            if "delta_CVEs_at" in currentReleaseNode["name"]:
                LastTimeCVE_delta = currentReleaseNode["browser_download_url"]
    except:
        try:
            for currentReleaseNode in LatestReleaseInformation.json()["assets"]:
                if "delta_CVEs_at" in currentReleaseNode["name"]:
                    LastTimeCVE_delta = currentReleaseNode["browser_download_url"]
        except:
            try:
                for currentReleaseNode in LatestReleaseInformation.json()["assets"]:
                    if "delta_CVEs_at" in currentReleaseNode["name"]:
                        LastTimeCVE_delta = currentReleaseNode["browser_download_url"]
            except Exception as e:
                print("[-]Get Github Release Error! : " + str(e))
    return LastTimeCVE_delta


def ClearLongLongAgoCVEs(currentYear, LatestCVEGithubRelease):
    WhatDayIsToday = time.mktime(time.strptime(LatestCVEGithubRelease.rsplit("/", 100)[7][4:14], "%Y-%m-%d"))
    WhatDaysWantToDelete = int(WhatDayIsToday) - 2592000
    DBconn = sqlite3.connect('CVE' + str(currentYear) + '_OfficialMonitor.UN')
    DBcursor = DBconn.cursor()
    DeleteLongLongAgoCVE = "DELETE FROM OldCVEs where CVEID=?;"
    QueryOldDatabaseCVEs = "SELECT * from OldCVEs"
    OldDatabaseCVEs = DBcursor.execute(QueryOldDatabaseCVEs).fetchall()
    for currentOldDatabaseCVE in OldDatabaseCVEs:
        if int(time.mktime(time.strptime(currentOldDatabaseCVE[7][0:10], "%Y-%m-%d"))) < WhatDaysWantToDelete:
            print("[*]Delete Long Long Ago CVE : " + currentOldDatabaseCVE[0])
            try:
                DBcursor.execute(DeleteLongLongAgoCVE, (currentOldDatabaseCVE[0],))
            except Exception as e:
                print("[-]Delete " + str(currentOldDatabaseCVE[0]) + " in OldCVEs Database Error: " + str(e))
    DBconn.commit()
    DBcursor.close()
    DBconn.close()


def MoveYesterdayCVEtoOld(currentYear, LatestCVEGithubRelease):
    WhatDayIsToday = LatestCVEGithubRelease.rsplit("/", 100)[7][4:14]
    DBconn = sqlite3.connect('CVE' + str(currentYear) + '_OfficialMonitor.UN')
    DBcursor = DBconn.cursor()
    InsertCVEtoOLDDatabase = "INSERT INTO OldCVEs(CVEID,  \
                                                  Title,  \
                                                  Descriptions,  \
                                                  Metrics,  \
                                                  CVEReferences,  \
                                                  ProblemTypes,  \
                                                  Affected, \
                                                  UpdateTime,  \
                                                  RecordValidity \
                                                  )values (?,?,?,?,?,?,?,?,?)"
    UpdateCVEtoOLDDatabase = "UPDATE OldCVEs SET Title=?,  \
                                                 Descriptions=?,  \
                                                 Metrics=?,  \
                                                 CVEReferences=?,  \
                                                 ProblemTypes=?,  \
                                                 Affected=?, \
                                                 UpdateTime=?,  \
                                                 RecordValidity=? \
                                                 where CVEID=?"
    DeleteTodayDatabaseOldCVEs = "DELETE FROM TodayCVEs where CVEID=?;"
    QueryTodayDatabaseCVEs = "SELECT * from TodayCVEs"
    TodayDatabaseCVEs = DBcursor.execute(QueryTodayDatabaseCVEs).fetchall()
    for currentTodayDatabaseCVE in TodayDatabaseCVEs:
        if not currentTodayDatabaseCVE[7][0:10] == WhatDayIsToday:
            print("[*]Move Yesterday CVE to OLD : " + str(currentTodayDatabaseCVE[0]))
            try:
                DBcursor.execute(InsertCVEtoOLDDatabase, currentTodayDatabaseCVE)
            except Exception as e:
                print("[-]Insert " + str(currentTodayDatabaseCVE[0]) + " to OldCVEs Database Error: " + str(e))
                print("[*]Try Update Move Yesterday CVE to OLD.")
                try:
                    DBcursor.execute(UpdateCVEtoOLDDatabase, (currentTodayDatabaseCVE[1],
                                                              currentTodayDatabaseCVE[2],
                                                              currentTodayDatabaseCVE[3],
                                                              currentTodayDatabaseCVE[4],
                                                              currentTodayDatabaseCVE[5],
                                                              currentTodayDatabaseCVE[6],
                                                              currentTodayDatabaseCVE[7],
                                                              currentTodayDatabaseCVE[8],
                                                              currentTodayDatabaseCVE[0],))
                except Exception as e:
                    print("[-]Update " + str(currentTodayDatabaseCVE[0]) + " to OldCVEs Database Error: " + str(e))
            try:
                DBcursor.execute(DeleteTodayDatabaseOldCVEs, (str(currentTodayDatabaseCVE[0]),))
            except Exception as e:
                print("[-]Delete " + str(currentTodayDatabaseCVE[0]) + " in TodayCVEs Database Error: " + str(e))
    DBconn.commit()
    DBcursor.close()
    DBconn.close()


def QueryExistCVE(currentYear):
    TodayExistCVE = []
    DBconn = sqlite3.connect('CVE' + str(currentYear) + '_OfficialMonitor.UN')
    DBcursor = DBconn.cursor()
    QueryTodayDatabaseCVEs = "SELECT * from TodayCVEs"
    TodayDatabaseCVE = DBcursor.execute(QueryTodayDatabaseCVEs).fetchall()
    for currentTodayDatabaseCVE in TodayDatabaseCVE:
        TodayExistCVE.append(currentTodayDatabaseCVE[0])
    DBcursor.close()
    DBconn.close()
    return TodayExistCVE


def SaveCVEToDatabase(currentYear, LatestCVEGithubRelease, LoadedLastCVEAllJsonArray):
    DBconn = sqlite3.connect('CVE' + str(currentYear) + '_OfficialMonitor.UN')
    DBcursor = DBconn.cursor()
    InsertCVEtoDatabase = "INSERT INTO TodayCVEs(CVEID,  \
                                                 Title,  \
                                                 Descriptions,  \
                                                 Metrics,  \
                                                 CVEReferences,  \
                                                 ProblemTypes,  \
                                                 Affected, \
                                                 UpdateTime,  \
                                                 RecordValidity \
                                                 )values (?,?,?,?,?,?,?,?,?)"
    InsertCNVDtoDatabase = "INSERT INTO CNVD(CVEID,  \
                                               SubmissionContent,  \
                                               SubmissionContent2,  \
                                               SubmissionContent3,  \
                                               SubmissionContent4,  \
                                               SubmissionContent5,  \
                                               SubmissionContent6,  \
                                               UpdateTime,  \
                                               RecordValidity \
                                               )values (?,?,?,?,?,?,?,?,?)"
    UpdateCVEtoDatabase = "UPDATE TodayCVEs set Title=?,  \
                                            Descriptions=?,  \
                                            Metrics=?,  \
                                            CVEReferences=?,  \
                                            ProblemTypes=?,  \
                                            Affected=?, \
                                            UpdateTime=?,  \
                                            RecordValidity=? \
                                            where CVEID=?"
    UpdateCNVDtoDatabase = "UPDATE CNVD set SubmissionContent=?,  \
                                              SubmissionContent2=?,  \
                                              SubmissionContent3=?,  \
                                              SubmissionContent4=?,  \
                                              SubmissionContent5=?,  \
                                              SubmissionContent6=?,  \
                                              UpdateTime=?,  \
                                              RecordValidity=? \
                                              where CVEID=?"
    TodayExistCVE = QueryExistCVE(currentYear)
    for currentLoadedLastCVEAllJson in LoadedLastCVEAllJsonArray:
        StandardDictionary = OrganizeJSONintoStandardDictionary(currentLoadedLastCVEAllJson)
        if not StandardDictionary["cveMetadata"]["cveId"] == "":
            if not StandardDictionary["cveMetadata"]["cveId"] in TodayExistCVE:
                WhatCVEFind = str(StandardDictionary["cveMetadata"]["cveId"])
                print("[+]Find New CVE : " + WhatCVEFind)
                try:
                    ResponseFromChatGPT = CallToMagicalChatGPT(str((str(StandardDictionary["cveMetadata"]["cveId"]),
                                                                    str(StandardDictionary["containers"]["cna"][
                                                                            "title"]),
                                                                    str(StandardDictionary["containers"]["cna"][
                                                                            "descriptions"][0]["value"]),
                                                                    str(StandardDictionary["containers"]["cna"][
                                                                            "metrics"][0]["cvssV3_1"][
                                                                            "baseScore"]) + " " + str(
                                                                        StandardDictionary["containers"]["cna"][
                                                                            "metrics"][0]["cvssV3_1"]["baseSeverity"]),
                                                                    str(StandardDictionary["containers"]["cna"][
                                                                            "references"]),
                                                                    str(StandardDictionary["containers"]["cna"][
                                                                            "problemTypes"][0]["descriptions"][0][
                                                                            "description"]),
                                                                    str(StandardDictionary["containers"]["cna"][
                                                                            "affected"]),
                                                                    str(LatestCVEGithubRelease.rsplit("/", 100)[7][
                                                                        4:20]),
                                                                    1,
                                                                    )), "CNVD", 2)
                except Exception as e:
                    ResponseFromChatGPT = ""
                    print("[-] " + WhatCVEFind + " ChatGPT Error! : " + str(e))
                try:
                    DBcursor.execute(InsertCVEtoDatabase, (str(StandardDictionary["cveMetadata"]["cveId"]),
                                                           str(StandardDictionary["containers"]["cna"]["title"]),
                                                           str(StandardDictionary["containers"]["cna"]["descriptions"][
                                                                   0][
                                                                   "value"]),
                                                           str(StandardDictionary["containers"]["cna"]["metrics"][0][
                                                                   "cvssV3_1"]["baseScore"]) + " " + str(
                                                               StandardDictionary["containers"]["cna"]["metrics"][0][
                                                                   "cvssV3_1"]["baseSeverity"]),
                                                           str(StandardDictionary["containers"]["cna"]["references"]),
                                                           str(StandardDictionary["containers"]["cna"]["problemTypes"][
                                                                   0][
                                                                   "descriptions"][0]["description"]),
                                                           str(StandardDictionary["containers"]["cna"]["affected"]),
                                                           str(LatestCVEGithubRelease.rsplit("/", 100)[7][4:20]),
                                                           1,
                                                           ))
                except Exception as e:
                    print("[-]Insert CVE to Database Error: " + str(e))
                    print("[*]Try Update CVE to Database.")
                    try:
                        DBcursor.execute(UpdateCVEtoDatabase, (str(StandardDictionary["containers"]["cna"]["title"]),
                                                               str(StandardDictionary["containers"]["cna"][
                                                                       "descriptions"][0][
                                                                       "value"]),
                                                               str(StandardDictionary["containers"]["cna"]["metrics"][
                                                                       0][
                                                                       "cvssV3_1"]["baseScore"]) + " " + str(
                                                                   StandardDictionary["containers"]["cna"]["metrics"][
                                                                       0][
                                                                       "cvssV3_1"]["baseSeverity"]),
                                                               str(StandardDictionary["containers"]["cna"][
                                                                       "references"]),
                                                               str(StandardDictionary["containers"]["cna"][
                                                                       "problemTypes"][0][
                                                                       "descriptions"][0]["description"]),
                                                               str(StandardDictionary["containers"]["cna"]["affected"]),
                                                               str(LatestCVEGithubRelease.rsplit("/", 100)[7][4:20]),
                                                               1,
                                                               str(StandardDictionary["cveMetadata"]["cveId"]),
                                                               ))
                    except Exception as e:
                        print("[-]Update " + str(
                            StandardDictionary["cveMetadata"]["cveId"]) + " to TodayCVEs Database Error: " + str(e))
                try:
                    if not ResponseFromChatGPT == "":
                        DBcursor.execute(InsertCNVDtoDatabase, (WhatCVEFind,
                                                                 ResponseFromChatGPT,
                                                                 "",
                                                                 "",
                                                                 "",
                                                                 "",
                                                                 "",
                                                                 str(datetime.datetime.now()),
                                                                 1,
                                                                 ))
                    else:
                        DBcursor.execute(InsertCNVDtoDatabase, (WhatCVEFind,
                                                                 ResponseFromChatGPT,
                                                                 "",
                                                                 "",
                                                                 "",
                                                                 "",
                                                                 "",
                                                                 str(datetime.datetime.now()),
                                                                 0,
                                                                 ))
                except Exception as e:
                    print("[-]Insert CNVD to Database Error: " + str(e))
                    print("[*]Try Update CNVD to Database.")
                    try:
                        DBcursor.execute(UpdateCNVDtoDatabase, (ResponseFromChatGPT,
                                                                 "",
                                                                 "",
                                                                 "",
                                                                 "",
                                                                 "",
                                                                 str(datetime.datetime.now()),
                                                                 0,
                                                                 WhatCVEFind
                                                                 ))
                    except Exception as e:
                        print("[-]Update " + WhatCVEFind + " to CNVD Database Error: " + str(e))
                EMailText = "CVE_ID：" + WhatCVEFind + \
                            "；\r\n    漏洞中文介绍：" + BaiduTranslate(str(StandardDictionary["cveMetadata"]["cveId"]),
                                                                      str(StandardDictionary["containers"]["cna"][
                                                                              "descriptions"][0]["value"])) + \
                            "；\r\n    漏洞标题：" + str(StandardDictionary["containers"]["cna"]["title"]) + \
                            "；\r\n    漏洞介绍：" + str(
                    StandardDictionary["containers"]["cna"]["descriptions"][0]["value"]) + \
                            "；\r\n    漏洞评分：" + str(
                    StandardDictionary["containers"]["cna"]["metrics"][0]["cvssV3_1"]["baseScore"]) + " " + str(
                    StandardDictionary["containers"]["cna"]["metrics"][0]["cvssV3_1"]["baseSeverity"]) + \
                            "；\r\n    相关链接：" + str(StandardDictionary["containers"]["cna"]["references"]) + \
                            "；\r\n    漏洞类型：" + str(
                    StandardDictionary["containers"]["cna"]["problemTypes"][0]["descriptions"][0]["description"]) + \
                            "；\r\n    受影响的产品：" + str(StandardDictionary["containers"]["cna"]["affected"]) + \
                            "。\r\n    <<(https://www.cve.org/CVERecord?id=" + WhatCVEFind + ")\r\nUnknown " \
                                                                                            "Security\r\n\r\n" + \
                            "CNVD模板：" + \
                            "\r\n" + ResponseFromChatGPT + "\r\n\r\nUnknown Security"
                try:
                    SendmailWithTelnet(MXServer_ReceiveEmail, "CVEMonitor@Unknown.Unknown", ReceiveEmail,
                                       "CVE_ID又上新啦！（" + WhatCVEFind + "） - Unknown Security", EMailText)
                except Exception as e:
                    print("[-]Send Email Error: " + str(e))
    DBconn.commit()
    DBcursor.close()
    DBconn.close()


def StartToMonitor(useGithubProxy=0):
    while True:
        try:
            LatestCVEGithubRelease = GetGithubRelease("https://github.com/CVEProject/cvelistV5/",
                                                      useGithubProxy=int(useGithubProxy))
            WhatYearItIsNow = int(LatestCVEGithubRelease.rsplit("/", 100)[7][4:8])
            if 2023 < WhatYearItIsNow < 2050:
                Year = WhatYearItIsNow
            else:
                Year = 2023
            DatabaseCreateInit(Year)
            LoadedLastCVEAllJsonArray = DownloadAndExtractFileToJsonLoad(LatestCVEGithubRelease,
                                                                         useGithubProxy=int(useGithubProxy))
            try:
                ClearLongLongAgoCVEs(Year, LatestCVEGithubRelease)
            except Exception as e:
                print("[-]Delete Long Long Ago CVE Error: " + str(e))
            try:
                MoveYesterdayCVEtoOld(Year, LatestCVEGithubRelease)
            except Exception as e:
                print("[-]Move Yesterday CVE to OldCVEs Error: " + str(e))
            SaveCVEToDatabase(Year, LatestCVEGithubRelease, LoadedLastCVEAllJsonArray)
        except Exception as e:
            print("[-]Error! Init Fail, Retry for 10 minuter ago.")
        time.sleep(600)
        try:
            ClearTmpFloader()
        except Exception as e:
            print("[-]Clear Tmp Floader Error: " + str(e))


if __name__ == "__main__":
    useGithubProxy = 2
    global Openai_Api_Key, BaiduTranslate_appid, BaiduTranslate_secretKey, MXServer_ReceiveEmail, ReceiveEmail
    BaiduTranslate_appid = ""
    BaiduTranslate_secretKey = ""
    MXServer_ReceiveEmail = ""
    ReceiveEmail = ""
    Openai_Api_Key = ""
    StartToMonitor(useGithubProxy)
